/*
	BioAssay Express (BAE)

	(c) 2016-2018 Collaborative Drug Discovery Inc.
	All rights reserved
*/

package com.cdd.bae.selenium.pages;

import com.cdd.bae.selenium.*;

import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.*;
import java.util.*;
import java.util.stream.*;

import org.json.*;
import org.junit.jupiter.api.*;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;

public class AssignPageTest extends PageTestBase
{
	private static final String DEFAULT_AUTOGENERATED_TEXT = "...";
	private static String defaultPageURL = "/assign.jsp";
	// TODO: Get all of this out of the forms json and transliterate json files
	private final String[] templateLabels = {"applies to disease", "biological process", "organism", "target", "bioassay type", 
			"assay format", "assay design method", "assay cell line", "assay footprint", "physical detection method", 
			"detection instrument", "units", "assay mode of action", "perturbagen type"};


	@BeforeEach
	public void setup()
	{
		this.pageURL = AssignPageTest.defaultPageURL;
		super.setup();
	}

	@Test
	public void testReadOnlyModeWithAssay() throws IOException, UnsupportedOperationException
	{
		//  pick a curated assay 
		String assayID = Setup.getValidAssayID().get("assayID");
		assertThat(assayID, notNullValue());
		JSONObject assay = Setup.getAssay(Integer.parseInt(assayID));

		//  open the assign page
		this.gotoPage("/assign.jsp?assayID=" + assayID);

		//  wait for javascript to load
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//div[@id='mainEntry']//table")));

		WebElement viewContainer = driver.findElement(By.id("mainEntry")).findElement(By.xpath(".//*//td"));
		List<WebElement> viewSelector = driver.findElements(By.xpath("//div[@id='formSelector']//label"));

		List<WebElement> views = viewContainer.findElements(By.xpath("./child::*"));
		Set<Integer> seen = new HashSet<>();
		WebElement mainEntry = driver.findElement(By.id("mainEntry"));

		/* ... page has been redesigned...
		assertEquals(viewSelector.size(), views.size());

		for (int i = 0; i < viewSelector.size(); i++)
		{
			viewSelector.get(i).click();

			// only one is visible (get it)
			assertEquals(1, views.stream().filter(v -> v.isDisplayed()).toArray().length);
			WebElement view = null;
			for (int j = 0; j < views.size(); ++j)
				if (views.get(j).isDisplayed())
				{
					view = views.get(j);
					seen.add(j);
				}

			// Added class for template_type or section_type to determine test to run

			if (viewSelector.get(i).getAttribute("class").contains("template-type"))
				runTemplateForm(viewSelector.get(i), assay);
			else if (viewSelector.get(i).getAttribute("class").contains("section-type"))
				runSectionForm(viewSelector.get(i), mainEntry, assay);
			else
				throw new UnsupportedOperationException("Unknown data view " + view.getTagName() + " with no test");
		}
		// did we check all views?
		assertEquals(views.size(), seen.size());*/
	}

	// assumes that click already occurred and that the required elements are loaded

	private void runTemplateForm(WebElement formSelectorButton, JSONObject assay)
	{
		// ensure we see auto generated text
		assertAnnotationValuesInWebElement(By.xpath("//p[@id='areaTranslit']/div"), assay, this.templateLabels);

		// ensure we see annotation text -- this one systematically checks each annotation value but is dependent upon the 
		// template_XXXXX_container id

		JSONArray annotations = findAnnotationsForAssay(assay);

		for (int i = 0; i < annotations.length(); i++)
		{
			JSONObject annotation = annotations.getJSONObject(i);
			String label = annotation.getString("propLabel");
			String assignmentContainerId = "template_" + label.replaceAll(" ", "_") + "_container";
			WebElement assignmentContainer = driver.findElement(By.id(assignmentContainerId));
			assertThat(assignmentContainer, notNullValue());

			if (annotation.has("valueLabel"))
			{
				List<WebElement> annotationBlocksHrefs = assignmentContainer.findElements(By.xpath(".//div[@class='annot-high']//a"));

				// If it is an href, it may not appear -- so get free pass
				if (annotationBlocksHrefs.size() > 0)
				{
					String normalizedValue = ui.normalizeString(annotation.getString("valueLabel"));

					List<String> foundAnnotations = ui.getElementsText(driver, ".//div[@class='annot-high']").stream()
							.filter(s -> !s.isEmpty())
							.map(s -> ui.normalizeString(s))
							.filter(s -> s.contains(normalizedValue))
							.collect(Collectors.toList());

					assertTrue(foundAnnotations.size() > 0);
				}
			}
		}
	}

	// assumes that click already occurred and that the required elements are loaded

	private void runSectionForm(WebElement formSelectorButton, WebElement mainEntry, JSONObject assay)
	{
		// find the parent container
		String formTypeString = formSelectorButton.getText();
		String xpath = ".//table[(@formtype='" + formTypeString + "') and (@class='editingFormContainer')]";
		WebElement parentContainer = mainEntry.findElement(By.xpath(xpath));

		// ensure we see auto generated text
		assertTrue(getAutogeneratedTextElements(parentContainer).size() > 0, "No autogenerated text found");

		// ensure we see some of the annotations
		Set<String> expectedAnnotations = new HashSet<>();
		JSONArray annotationList = findAnnotationsForAssay(assay);
		for (int i = 0; i < annotationList.length(); i++)
		{
			JSONObject annotation = annotationList.getJSONObject(i);
			if (annotation.has("valueLabel"))
				expectedAnnotations.add(ui.normalizeString(annotation.getString("valueLabel")));
		}

		List<String> foundAnnotations = ui.getElementsText(driver, ".//div[@class='annot-high']").stream()
				.filter(s -> !s.isEmpty())
				.map(s -> ui.normalizeString(s))
				.filter(expectedAnnotations::contains)
				.collect(Collectors.toList());

		assertThat(foundAnnotations.size(), greaterThan(0));
		assertTrue(foundAnnotations.size() > 0);
	}
	
	private List<WebElement> getAutogeneratedTextElements(WebElement container)
	{
		return ui.saveFindElements(container, ".//div[contains(@class, 'autogeneratedText')]").stream()
			.filter(e -> e.isDisplayed())
			.filter(e -> !e.getText().equals(DEFAULT_AUTOGENERATED_TEXT))
			.collect(Collectors.toList());
	}
}
